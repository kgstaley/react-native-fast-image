{"version":3,"file":"react-native-fast-image.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport {\n    FlexStyle,\n    Image,\n    LayoutChangeEvent,\n    NativeModules,\n    Platform,\n    requireNativeComponent,\n    ShadowStyleIOS,\n    StyleProp,\n    StyleSheet,\n    TransformsStyle,\n    View,\n} from 'react-native'\n\nconst FastImageViewNativeModule = NativeModules.FastImageView\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch' | 'center'\n\nconst resizeMode = {\n    contain: 'contain',\n    cover: 'cover',\n    stretch: 'stretch',\n    center: 'center',\n} as const\n\ntype Priority = 'low' | 'normal' | 'high'\n\nconst priority = {\n    low: 'low',\n    normal: 'normal',\n    high: 'high',\n} as const\n\ntype Cache = 'low' | 'normal' | 'high'\n\nconst cacheControl = {\n    // Ignore headers, use uri as cache key, fetch only if not in cache.\n    immutable: 'immutable',\n    // Respect http headers, no aggressive caching.\n    web: 'web',\n    // Only load from cache.\n    cacheOnly: 'cacheOnly',\n} as const\n\nexport type Source = {\n    uri?: string\n    headers?: { [key: string]: string }\n    priority?: Priority\n    cache?: Cache\n}\n\nexport interface OnLoadEvent {\n    nativeEvent: {\n        width: number\n        height: number\n    }\n}\n\nexport interface OnProgressEvent {\n    nativeEvent: {\n        loaded: number\n        total: number\n    }\n}\n\nexport interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {\n    backfaceVisibility?: 'visible' | 'hidden'\n    borderBottomLeftRadius?: number\n    borderBottomRightRadius?: number\n    backgroundColor?: string\n    borderColor?: string\n    borderWidth?: number\n    borderRadius?: number\n    borderTopLeftRadius?: number\n    borderTopRightRadius?: number\n    overlayColor?: string\n    tintColor?: string\n    opacity?: number\n}\n\nexport interface FastImageProps {\n    source: Source | number\n    resizeMode?: ResizeMode\n    fallback?: boolean\n\n    onLoadStart?(): void\n\n    onProgress?(event: OnProgressEvent): void\n\n    onLoad?(event: OnLoadEvent): void\n\n    onError?(): void\n\n    onLoadEnd?(): void\n\n    /**\n     * onLayout function\n     *\n     * Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.\n     */\n    onLayout?: (event: LayoutChangeEvent) => void\n\n    /**\n     *\n     * Style\n     */\n    style?: StyleProp<ImageStyle>\n\n    /**\n     * TintColor\n     *\n     * If supplied, changes the color of all the non-transparent pixels to the given color.\n     */\n\n    tintColor?: number | string\n\n    /**\n     * A unique identifier for this element to be used in UI Automation testing scripts.\n     */\n    testID?: string\n\n    /**\n     * Render children within the image.\n     */\n    children?: React.ReactNode\n}\n\nfunction FastImageBase({\n    source,\n    tintColor,\n    onLoadStart,\n    onProgress,\n    onLoad,\n    onError,\n    onLoadEnd,\n    style,\n    fallback,\n    children,\n    resizeMode = 'cover',\n    forwardedRef,\n    ...props\n}: FastImageProps & { forwardedRef: React.Ref<any> }) {\n    const resolvedSource = Image.resolveAssetSource(source as any)\n\n    if (fallback || Platform.OS === 'web') {\n        return (\n            <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n                <Image\n                    {...props}\n                    style={StyleSheet.absoluteFill}\n                    source={resolvedSource}\n                    onLoadStart={onLoadStart}\n                    onProgress={onProgress}\n                    onLoad={onLoad as any}\n                    onError={onError}\n                    onLoadEnd={onLoadEnd}\n                    resizeMode={resizeMode}\n                />\n                {children}\n            </View>\n        )\n    }\n\n    return (\n        <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n            <FastImageView\n                {...props}\n                tintColor={tintColor}\n                style={StyleSheet.absoluteFill}\n                source={resolvedSource}\n                onFastImageLoadStart={onLoadStart}\n                onFastImageProgress={onProgress}\n                onFastImageLoad={onLoad}\n                onFastImageError={onError}\n                onFastImageLoadEnd={onLoadEnd}\n                resizeMode={resizeMode}\n            />\n            {children}\n        </View>\n    )\n}\n\nconst FastImageMemo = memo(FastImageBase)\n\nconst FastImageComponent: React.ComponentType<FastImageProps> = forwardRef(\n    (props: FastImageProps, ref: React.Ref<any>) => (\n        <FastImageMemo forwardedRef={ref} {...props} />\n    ),\n)\n\nFastImageComponent.displayName = 'FastImage'\n\ninterface FastImageStaticProperties {\n    resizeMode: typeof resizeMode\n    priority: typeof priority\n    cacheControl: typeof cacheControl\n    preload: (sources: Source[]) => void\n}\n\nconst FastImage: React.ComponentType<FastImageProps> &\n    FastImageStaticProperties = FastImageComponent as any\n\nFastImage.resizeMode = resizeMode\n\nFastImage.cacheControl = cacheControl\n\nFastImage.priority = priority\n\nFastImage.preload = (sources: Source[]) => {\n    if (Platform.OS !== 'web') {\n        FastImageViewNativeModule.preload(sources)\n    }\n}\n\nconst styles = StyleSheet.create({\n    imageContainer: {\n        overflow: 'hidden',\n    },\n})\n\nlet FastImageView: any\n\nif (Platform.OS === 'web') {\n    FastImageView = Image\n} else {\n    // Types of requireNativeComponent are not correct.\n    FastImageView = (requireNativeComponent as any)(\n        'FastImageView',\n        FastImage,\n        {\n            nativeOnly: {\n                onFastImageLoadStart: true,\n                onFastImageProgress: true,\n                onFastImageLoad: true,\n                onFastImageError: true,\n                onFastImageLoadEnd: true,\n            },\n        },\n    )\n}\n\nexport default FastImage\n"],"names":["FastImageViewNativeModule","NativeModules","FastImageView","resizeMode","contain","cover","stretch","center","priority","low","normal","high","cacheControl","immutable","web","cacheOnly","FastImageBase","source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","forwardedRef","props","resolvedSource","Image","resolveAssetSource","Platform","OS","React","View","styles","imageContainer","ref","StyleSheet","absoluteFill","onFastImageLoadStart","onFastImageProgress","onFastImageLoad","onFastImageError","onFastImageLoadEnd","FastImageMemo","memo","FastImageComponent","forwardRef","displayName","FastImage","preload","sources","create","overflow","requireNativeComponent","nativeOnly"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAMA,yBAAyB,GAAGC,yBAAa,CAACC,aAAhD;AAIA,IAAMC,UAAU,GAAG;AACfC,EAAAA,OAAO,EAAE,SADM;AAEfC,EAAAA,KAAK,EAAE,OAFQ;AAGfC,EAAAA,OAAO,EAAE,SAHM;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;AASA,IAAMC,QAAQ,GAAG;AACbC,EAAAA,GAAG,EAAE,KADQ;AAEbC,EAAAA,MAAM,EAAE,QAFK;AAGbC,EAAAA,IAAI,EAAE;AAHO,CAAjB;AAQA,IAAMC,YAAY,GAAG;AACjB;AACAC,EAAAA,SAAS,EAAE,WAFM;AAGjB;AACAC,EAAAA,GAAG,EAAE,KAJY;AAKjB;AACAC,EAAAA,SAAS,EAAE;AANM,CAArB;;AA8FA,SAASC,aAAT;MACIC,cAAAA;MACAC,iBAAAA;MACAC,mBAAAA;MACAC,kBAAAA;MACAC,cAAAA;MACAC,eAAAA;MACAC,iBAAAA;MACAC,aAAAA;MACAC,gBAAAA;MACAC,gBAAAA;6BACAvB;MAAAA,0CAAa;MACbwB,oBAAAA;MACGC;;AAEH,MAAMC,cAAc,GAAGC,iBAAK,CAACC,kBAAN,CAAyBd,MAAzB,CAAvB;;AAEA,MAAIQ,QAAQ,IAAIO,oBAAQ,CAACC,EAAT,KAAgB,KAAhC,EAAuC;AACnC,WACIC,4BAAA,CAACC,gBAAD;AAAMX,MAAAA,KAAK,EAAE,CAACY,MAAM,CAACC,cAAR,EAAwBb,KAAxB;AAAgCc,MAAAA,GAAG,EAAEX;KAAlD,EACIO,4BAAA,CAACJ,iBAAD,oBACQF;AACJJ,MAAAA,KAAK,EAAEe,sBAAU,CAACC;AAClBvB,MAAAA,MAAM,EAAEY;AACRV,MAAAA,WAAW,EAAEA;AACbC,MAAAA,UAAU,EAAEA;AACZC,MAAAA,MAAM,EAAEA;AACRC,MAAAA,OAAO,EAAEA;AACTC,MAAAA,SAAS,EAAEA;AACXpB,MAAAA,UAAU,EAAEA;MAThB,CADJ,EAYKuB,QAZL,CADJ;AAgBH;;AAED,SACIQ,4BAAA,CAACC,gBAAD;AAAMX,IAAAA,KAAK,EAAE,CAACY,MAAM,CAACC,cAAR,EAAwBb,KAAxB;AAAgCc,IAAAA,GAAG,EAAEX;GAAlD,EACIO,4BAAA,CAAChC,aAAD,oBACQ0B;AACJV,IAAAA,SAAS,EAAEA;AACXM,IAAAA,KAAK,EAAEe,sBAAU,CAACC;AAClBvB,IAAAA,MAAM,EAAEY;AACRY,IAAAA,oBAAoB,EAAEtB;AACtBuB,IAAAA,mBAAmB,EAAEtB;AACrBuB,IAAAA,eAAe,EAAEtB;AACjBuB,IAAAA,gBAAgB,EAAEtB;AAClBuB,IAAAA,kBAAkB,EAAEtB;AACpBpB,IAAAA,UAAU,EAAEA;IAVhB,CADJ,EAaKuB,QAbL,CADJ;AAiBH;;AAED,IAAMoB,aAAa,gBAAGC,UAAI,CAAC/B,aAAD,CAA1B;AAEA,IAAMgC,kBAAkB,gBAAwCC,gBAAU,CACtE,UAACrB,KAAD,EAAwBU,GAAxB;AAAA,SACIJ,4BAAA,CAACY,aAAD;AAAenB,IAAAA,YAAY,EAAEW;KAASV,MAAtC,CADJ;AAAA,CADsE,CAA1E;AAMAoB,kBAAkB,CAACE,WAAnB,GAAiC,WAAjC;AASA,IAAMC,SAAS,GACiBH,kBADhC;AAGAG,SAAS,CAAChD,UAAV,GAAuBA,UAAvB;AAEAgD,SAAS,CAACvC,YAAV,GAAyBA,YAAzB;AAEAuC,SAAS,CAAC3C,QAAV,GAAqBA,QAArB;;AAEA2C,SAAS,CAACC,OAAV,GAAoB,UAACC,OAAD;AAChB,MAAIrB,oBAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvBjC,IAAAA,yBAAyB,CAACoD,OAA1B,CAAkCC,OAAlC;AACH;AACJ,CAJD;;AAMA,IAAMjB,MAAM,gBAAGG,sBAAU,CAACe,MAAX,CAAkB;AAC7BjB,EAAAA,cAAc,EAAE;AACZkB,IAAAA,QAAQ,EAAE;AADE;AADa,CAAlB,CAAf;AAMA,IAAIrD,aAAJ;;AAEA,IAAI8B,oBAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvB/B,EAAAA,aAAa,GAAG4B,iBAAhB;AACH,CAFD,MAEO;AACH;AACA5B,EAAAA,aAAa,gBAAIsD,kCAA8B,CAC3C,eAD2C,EAE3CL,SAF2C,EAG3C;AACIM,IAAAA,UAAU,EAAE;AACRhB,MAAAA,oBAAoB,EAAE,IADd;AAERC,MAAAA,mBAAmB,EAAE,IAFb;AAGRC,MAAAA,eAAe,EAAE,IAHT;AAIRC,MAAAA,gBAAgB,EAAE,IAJV;AAKRC,MAAAA,kBAAkB,EAAE;AALZ;AADhB,GAH2C,CAA/C;AAaH;;;;"}